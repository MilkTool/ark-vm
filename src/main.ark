[c] func printf(fmt: ^u8, ...) -> int;

type InstructionSet enum {
    HLT,
    PSH,
    POP,
    ADD,
    SUB
};

type VirtualMachine struct {
    running: bool,
    program: []s32,
    ip: s32,
    sp: s32,
    stack: []s32,
};

func (VirtualMachine) new() -> VirtualMachine {
    res := VirtualMachine{
        running: true,
        program: []s32{
            s32(InstructionSet::PSH), 5,
            s32(InstructionSet::PSH), 5,
            s32(InstructionSet::ADD),
            s32(InstructionSet::PSH), 7,
            s32(InstructionSet::SUB),
            s32(InstructionSet::POP),
            s32(InstructionSet::HLT)
        },
        ip: 0,
        sp: 0,
        stack: []s32{ 0, 0, 0, 0, 0 }
    };
    return res;
}

func (vm: ^mut VirtualMachine) fetch() -> s32 {
    instr: s32 = vm.program[vm.ip];
    return instr;
}

func (vm: ^mut VirtualMachine) eval(instr: s32) {
    if instr == s32(InstructionSet::HLT) {
        vm.running = false;
    }
    else if instr == s32(InstructionSet::PSH) {
        vm.ip = vm.ip + 1;
        vm.sp = vm.sp + 1;
        vm.stack[vm.sp] = vm.program[vm.ip];
    }
    else if instr == s32(InstructionSet::POP) {
        val := vm.stack[vm.sp];
        vm.sp = vm.sp - 1;
        C::printf(c"POP result: %d\n", val);
    }
    else if instr == s32(InstructionSet::ADD) {
        a := vm.stack[vm.sp];
        vm.sp = vm.sp - 1;

        b := vm.stack[vm.sp];
        vm.sp = vm.sp - 1;

        result := a + b;
        C::printf(c"ADD result: %d\n", result);
        vm.sp = vm.sp + 1;
        vm.stack[vm.sp] = result;
    }
    else if instr == s32(InstructionSet::SUB) {
        a := vm.stack[vm.sp];
        vm.sp = vm.sp - 1;

        b := vm.stack[vm.sp];
        vm.sp = vm.sp - 1;

        result := b - a;
        C::printf(c"SUB result: %d\n", result);
        vm.sp = vm.sp + 1;
        vm.stack[vm.sp] = result;
    }
    else {
        C::printf(c"unimplemented instr\n");
    }
}

pub func main()  -> int {
    mut no_alloc_vm: VirtualMachine = VirtualMachine::new();
    mut vm: ^mut VirtualMachine = ^mut no_alloc_vm;

    for vm.running {
        vm.eval(vm.fetch());
        vm.ip = vm.ip + 1;
    }

    return 0;
}
