[c] func printf(fmt: str, ...): int;

PSH: s32 = 0;
ADD: s32 = 1;
POP: s32 = 2;
HLT: s32 = 3;

struct VirtualMachine {
    running: bool,
    sp: s32,
    ip: s32,
    program: []s32,
    stack: []s32,
}

func fetch(vm: ^VirtualMachine): s32 {
    instr: s32 = vm.program[vm.ip];
    return instr;
}

func eval(vm: ^VirtualMachine, instr: s32) {
    if instr == HLT {
        vm.running = false;
    }
    else if instr == PSH {
        C::printf("fuck psh %d\n", vm.ip);

        vm.ip = vm.ip + 1;
        vm.sp = vm.sp + 1;
        C::printf("sp at psh is %d\n", vm.sp);
        vm.stack[vm.sp] = vm.program[vm.ip];
    }
    else if instr == POP {
        C::printf("fuck p\n");

        val := vm.stack[vm.sp];
        vm.sp = vm.sp - 1;
        C::printf("popped %d\n", val);
    }
    else if instr == ADD {
        C::printf("fuck a %d\n", vm.sp);

        a := vm.stack[vm.sp];
        vm.sp = vm.sp - 1;

        C::printf("fuck b %d\n", vm.sp);

        b := vm.stack[vm.sp];
        vm.sp = vm.sp - 1;

        result := a + b;
        C::printf("result is %d\n", result);
        vm.sp = vm.sp + 1;
        vm.stack[vm.sp] = result;
    }
}

func main(): int {
    vm: VirtualMachine;
    vm.running = true;
    vm.program = [ PSH, 5, PSH, 5, ADD, POP, HLT ];
    vm.ip = 0;
    vm.sp = 0;
    vm.stack = [ 0, 0, 0, 0, 0 ];

    for vm.running {
        eval(&vm, fetch(&vm));
        vm.ip = vm.ip + 1;
    }

    return 0;
}
