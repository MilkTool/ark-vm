[c] func printf(fmt: str, ...): int;

enum InstructionSet {
    HLT,
    PSH,
    POP,
    ADD,
    SUB
}

struct VirtualMachine {
    running: bool,
    sp: s32,
    ip: s32,
    program: []s32,
    stack: []s32,
}

func fetch(vm: ^VirtualMachine): s32 {
    instr: s32 = vm.program[vm.ip];
    return instr;
}

func eval(vm: ^VirtualMachine, instr: s32) {
    if instr == s32(InstructionSet::HLT) {
        vm.running = false;
    }
    else if instr == s32(InstructionSet::PSH) {
        vm.ip = vm.ip + 1;
        vm.sp = vm.sp + 1;
        vm.stack[vm.sp] = vm.program[vm.ip];
    }
    else if instr == s32(InstructionSet::POP) {
        val := vm.stack[vm.sp];
        vm.sp = vm.sp - 1;
        C::printf("POP result: %d\n", val);
    }
    else if instr == s32(InstructionSet::ADD) {
        a := vm.stack[vm.sp];
        vm.sp = vm.sp - 1;

        b := vm.stack[vm.sp];
        vm.sp = vm.sp - 1;

        result := a + b;
        C::printf("ADD result: %d\n", result);
        vm.sp = vm.sp + 1;
        vm.stack[vm.sp] = result;
    }
    else if instr == s32(InstructionSet::SUB) {
        a := vm.stack[vm.sp];
        vm.sp = vm.sp - 1;

        b := vm.stack[vm.sp];
        vm.sp = vm.sp - 1;

        result := b - a;
        C::printf("SUB result: %d\n", result);
        vm.sp = vm.sp + 1;
        vm.stack[vm.sp] = result;
    }
    else {
        C::printf("unimplemented instr\n");
    }
}

func main(): int {
    vm: VirtualMachine;
    vm.running = true;
    vm.program = [ 
        s32(InstructionSet::PSH), 5, 
        s32(InstructionSet::PSH), 5, 
        s32(InstructionSet::ADD), 
        s32(InstructionSet::PSH), 7, 
        s32(InstructionSet::SUB), 
        s32(InstructionSet::POP), 
        s32(InstructionSet::HLT) 
    ];
    vm.ip = 0;
    vm.sp = 0;
    vm.stack = [ 0, 0, 0, 0, 0 ];

    for vm.running {
        eval(&vm, fetch(&vm));
        vm.ip = vm.ip + 1;
    }

    return 0;
}
