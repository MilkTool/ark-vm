[c] func printf(fmt: str, ...): int;

PSH: s32 = 0;
ADD: s32 = 1;
POP: s32 = 2;
HLT: s32 = 3;

struct VirtualMachine {
    running: bool,
    sp: s32,
    ip: s32,
    program: []s32
}

func fetch(vm: VirtualMachine): s32 {
    instr: s32 = vm.program[vm.ip];
    C::printf("%d\n", instr);
    return instr;
}

func eval(vm: VirtualMachine, instr: s32) {
    match instr {
        HLT -> C::printf("halting\n");
        PSH -> C::printf("push\n");
        POP -> C::printf("pop\n");
        ADD -> C::printf("add\n");
    }
}

func main(): int {
    vm: VirtualMachine;
    vm.running = true;
    vm.program = [ 0, 1, 2, 3 ];

    for vm.running {
        eval(vm, fetch(vm));
        vm.ip = vm.ip + 1;
    }

    return 0;
}